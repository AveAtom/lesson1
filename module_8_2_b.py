print("=== Сложные моменты и исключения в стеке вызовов функции. ====\n")


# Задача "План перехват.":
# Напишите 2 функции:
# Функция personal_sum(numbers):
# 1.Должна принимать коллекцию numbers.
# 2.Подсчитывать сумму чисел в numbers путём перебора и увеличивать переменную result.
# 3.Если же при переборе встречается данное типа отличного от числового, то обработать исключение TypeError,
# увеличив счётчик incorrect_data на 1.
# 4.В конечном итоге функция возвращает кортеж из двух значений: result - сумма чисел, incorrect_data -
# кол-во некорректных данных.
# Функция calculate_average(numbers)
# Среднее арифметическое - сумма всех данных делённая на их количество.
# 1.Должна принимать коллекцию numbers и возвращать: среднее арифметическое всех чисел.
# 2.Внутри для подсчёта суммы используйте функцию personal_sum написанную ранее.
# 3.Т.к. коллекция numbers может оказаться пустой, то обработайте исключение ZeroDivisionError при делении на 0 и верните 0.
# 4.Также в numbers может быть записана не коллекция, а другие типы данных, например числа. Обработайте исключение
# TypeError выводя строку 'В numbers записан некорректный тип данных'. В таком случае функция просто вернёт None.
#
# Пункты задачи:
# 1.Создайте функцию personal_sum на основе условий задачи.
# 2.Создайте функцию calculate_average на основе условий задачи.
# 3.Вызовите функцию calculate_average несколько раз, передав в неё данные разных вариаций.
# ***************************************************************************************************************
# === Функции ===
def calculate_average(numbers):  # Должна принимать коллекцию numbers и возвращать: среднее арифметическое всех чисел
    # (отбрасывая элементы с ошибочными значениями).
    def personal_sum(numbers):  # Должна принимать коллекцию numbers.
        def correct_elem(number): # Декоративная функция для проведения проверки параметров personal_sum
                                    # при использовании суммирования через sum().
            nonlocal incorrect_data # Ссылаемся на переменную в функции personal_sum.
            try:
                number1 = number + 1  # Функция для проверки
            except TypeError:
                incorrect_data+=1
                print(
                    f'Некорректный тип данных для подсчёта суммы - {number}')  # Выводим строку ошибки + ошибочное значение.
                return 0 # Возвращаем 0 для штатной работы sum().
            return number  # функция декоративная, поэтому возвращаем то, что пришло.

        incorrect_data = 0
        numbers = [*numbers]  # Преобразовываем входящие данные в список
        return sum([correct_elem(number) for number in
                    numbers]), incorrect_data  # Если возвращаемое значение кортеж - скобки можно не писать.

    result = None  # Значение по умолчанию
    try:
        res = personal_sum(numbers)  # Запрашиваем сумму.
        # print(numbers,len(numbers),res)
        result = res[0] / (
                len(numbers) - res[1])  # Вычисляем среднее значение отбрасывая данные с ошибочными значениями.
    except ZeroDivisionError:
        return 0
    except TypeError:
        print(f'В numbers записан некорректный тип данных')
    return result


# === Прогон ===
print(f'Результат 1: {calculate_average("1, 2, 3")}')  # Строка перебирается, но каждый символ - строковый тип
print(f'Результат 2: {calculate_average([1, "Строка", 3, "Ещё Строка"])}')  # Учитываются только 1 и 3
print(f'Результат 3: {calculate_average(567)}')  # Передана не коллекция
print(f'Результат 4: {calculate_average([42, 15, 36, 13])}')  # Всё должно работать

print('\n=== Конец обработки === ')
