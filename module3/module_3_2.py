print("=== Способы вызова функции.====\n")


# Задача "Рассылка писем":
# Часто при разработке и работе с рассылками писем(e-mail) они отправляются от одного и того же
# пользователя(администрации или службы поддержки). Тем не менее должна быть возможность сменить его в редких случаях.
# Попробуем реализовать функцию с подробной логикой.
# Создайте функцию send_email, которая принимает 2 обычных аргумента: сообщение и получатель и 1 обязательно
# именованный аргумент со значением по умолчанию - отправитель.
# Внутри функции реализовать следующую логику:
# Проверка на корректность e-mail отправителя и получателя.
# Проверка на отправку самому себе.
# Проверка на отправителя по умолчанию.
# Пункты задачи:
# 1.Создайте функцию send_email, которая принимает 2 обычных аргумента: message(сообщение), recipient(получатель) и 1
# обязательно именованный аргумент со значением по умолчанию sender = "university.help@gmail.com".
# 2.Если строки recipient и sender не содержит "@" или не оканчивается на ".com"/".ru"/".net", то вывести
# на экран(в консоль) строку: "Невозможно отправить письмо с адреса <sender> на адрес <recipient>".
# 3.Если же sender и recipient совпадают, то вывести "Нельзя отправить письмо самому себе!"
# 4.Если же отправитель по умолчанию - university.help@gmail.com, то вывести сообщение: "Письмо успешно отправлено с
# адреса <sender> на адрес <recipient>."
# 5.В противном случае вывести сообщение: "НЕСТАНДАРТНЫЙ ОТПРАВИТЕЛЬ! Письмо отправлено с адреса <sender>
# на адрес <recipient>."
# 6.Здесь <sender> и <recipient> - значения хранящиеся в этих переменных.
# 7.За один вызов функции выводится только одно и перечисленных уведомлений! Проверки перечислены по мере выполнения.
#
# Примечания:
# 1.Обязательно именованные аргументы отделяются от остальных символом "*" перед ними.
# 2.Именованные аргументы всегда идут после позиционных.
# *****************************************************************************************************************
# Дополнение: почтовые адреса могут содержать заглавные буквы. Это не является ошибкой для почтовой системы. Поэтому
# перед проверкой на сравнение приводим адрес к виду (все буквы - прописные - str.lower()).
# === Функции
def send_email(message="", recipient="", *, sender="university.help@gmail.com"):  # Определяем функцию send_email
    domain = ['com', 'ru', 'net']  # Определяем список эталонных значений
    # Если строки recipient и sender не содержит "@" или не оканчивается на ".com"/".ru"/".net", то вывести
    # на экран(в консоль) строку: "Невозможно отправить письмо с адреса <sender> на адрес <recipient>".
    if len([x for x in domain if '.' + x in recipient.lower()]) * len([x for x in domain if '.' + x in sender.lower()]) == 0 or (
            '@' not in sender) or ('@' not in recipient):  # Проверяем наличие '@' в sender и recipient, и
        # вхождение элементов списка эталонных значений в аргументы recipient и sender через создание результирующих
        # списков и перемножение длины данных результирующих списков. Если длина любого из результирующих списков =0,
        # то и результат перемножения тоже будет равен нулю что является маркером срабатывания условия.
        print(f'Невозможно отправить письмо с адреса {sender} на адрес {recipient}')
        return
    # Если же sender и recipient совпадают, то вывести "Нельзя отправить письмо самому себе!"
    if recipient.lower() == sender.lower():
        print('Нельзя отправить письмо самому себе!')
        return
    # Если же отправитель по умолчанию - university.help@gmail.com, то вывести сообщение: "Письмо успешно отправлено с
    # адреса <sender> на адрес <recipient>."
    # В противном случае вывести сообщение: "НЕСТАНДАРТНЫЙ ОТПРАВИТЕЛЬ! Письмо отправлено с адреса <sender>
    # на адрес <recipient>."
    if sender.lower() == 'university.help@gmail.com':
        print(f'Письмо успешно отправлено с адреса {sender} на адрес {recipient}.')
    else:
        print(f'НЕСТАНДАРТНЫЙ ОТПРАВИТЕЛЬ! Письмо отправлено с адреса {sender} на адрес {recipient}.')


# === Прогон ===
send_email('Это сообщение для проверки связи', 'vasyok1337@gmail.com')
send_email('Вы видите это сообщение как лучший студент курса!', 'urban.fan@mail.ru', sender='urban.info@gmail.com')
send_email('Пожалуйста, исправьте задание', 'urban.student@mail.ru', sender='urban.teacher@mail.uk')
send_email('Напоминаю самому себе о вебинаре', 'urban.teacher@mail.ru', sender='urban.teacher@mail.ru')

print('\n === Конец обработки ===')
