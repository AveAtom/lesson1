from math import pi, sqrt # Импорт pi и квадратного корня.

print('=== Дополнительное практическое задание по модулю: "Наследование классов". ====\n')


# Задание "Они все так похожи.":
# 2D? 3D? Даже 4D?.... Настолько глубоко мы заходить конечно же не будем, 4D подождёт, но вот с двумерными и трёхмерными
# фигурами можем поэкспериментировать.
# Вы когда-нибудь задумывались как устроены графические библиотеки для языков программирования?
# Безусловно, там выполняются огромные расчёты при помощи вашей видеокарты, но... Что лежит в основе удобного
# использования таких объектов?
# По названию задачи можно понять, что все геометрические фигуры обладают схожими свойствами, такими как: длины сторон,
# цвет и др.
# Давайте попробуем реализовать простейшие классы для некоторых таких фигур и при этом применить наследование
# (в будущем, изучая сторонние библиотеки, вы будете замечать схожие классы, уже написанные кем-то ранее):
# Общее ТЗ:
# Реализовать классы Figure(родительский), Circle, Triangle и Cube, объекты которых будут обладать методами изменения
# размеров, цвета и т.д.
# Многие атрибуты и методы должны быть инкапсулированны и для них должны быть написаны интерфейсы взаимодействия
# (методы) - геттеры и сеттеры.
# Подробное ТЗ:
# Атрибуты класса Figure: sides_count = 0
# Каждый объект класса Figure должен обладать следующими атрибутами:
# 1.Атрибуты(инкапсулированные): __sides(список сторон (целые числа)), __color(список цветов в формате RGB)
# 2.Атрибуты(публичные): filled(закрашенный, bool)
# И методами:
# 1.Метод get_color, возвращает список RGB цветов.
# 2.Метод __is_valid_color - служебный, принимает параметры r, g, b, который проверяет корректность переданных значений
# перед установкой нового цвета. Корректным цвет: все значения r, g и b - целые числа в диапазоне от 0 до 255 (включительно).
# 3.Метод set_color принимает параметры r, g, b - числа и изменяет атрибут __color на соответствующие значения,
# предварительно проверив их на корректность. Если введены некорректные данные, то цвет остаётся прежним.
# 4.Метод __is_valid_sides - служебный, принимает неограниченное кол-во сторон, возвращает True если все стороны
# целые положительные числа и кол-во новых сторон совпадает с текущим, False - во всех остальных случаях.
# 5.Метод get_sides должен возвращать значение я атрибута __sides.
# 6.Метод __len__ должен возвращать периметр фигуры.
# 7.Метод set_sides(self, *new_sides) должен принимать новые стороны, если их количество не равно sides_count, то не
# изменять, в противном случае - менять.
# Атрибуты класса Circle: sides_count = 1
# Каждый объект класса Circle должен обладать следующими атрибутами и методами:
# 1.Все атрибуты и методы класса Figure
# 2.Атрибут __radius, рассчитать исходя из длины окружности (одной единственной стороны).
# 3.Метод get_square возвращает площадь круга (можно рассчитать как через длину, так и через радиус).
# Атрибуты класса Triangle: sides_count = 3
# Каждый объект класса Triangle должен обладать следующими атрибутами и методами:
# 1.Все атрибуты и методы класса Figure
# 2.Метод get_square возвращает площадь треугольника. (можно рассчитать по формуле Герона)
# Атрибуты класса Cube: sides_count = 12
# Каждый объект класса Cube должен обладать следующими атрибутами и методами:
# 1.Все атрибуты и методы класса Figure.
# 2.Переопределить __sides сделав список из 12 одинаковы сторон (передаётся 1 сторона)
# 3.Метод get_volume, возвращает объём куба.
# ВАЖНО!
# При создании объектов делайте проверку на количество переданных сторон, если сторон не ровно sides_count,
# то создать массив с единичными сторонами и в том кол-ве, которое требует фигура.
# Пример 1: Circle((200, 200, 100), 10, 15, 6), т.к. сторона у круга всего 1, то его стороны будут - [1]
# Пример 2: Triangle((200, 200, 100), 10, 6), т.к. сторон у треугольника 3, то его стороны будут - [1, 1, 1]
# Пример 3: Cube((200, 200, 100), 9), т.к. сторон(рёбер) у куба - 12, то его стороны будут - [9, 9, 9, ....., 9] (12)
# Пример 4: Cube((200, 200, 100), 9, 12), т.к. сторон(рёбер) у куба - 12, то его стороны будут - [1, 1, 1, ....., 1]
# Примечания (рекомендации):
# 1.Рекомендуется сделать дополнительные (свои проверки) работы методов объектов каждого класса.
# 2.Делайте каждый класс и метод последовательно и проверяйте работу каждой части отдельно.
# 3.Для проверки принадлежности к типу рекомендуется использовать функцию isinstance.
# 4.Помните, служебные инкапсулированные методы можно и нужно использовать только внутри текущего класса.
# 5.Вам не запрещается вводить дополнительные атрибуты и методы, творите, но не переборщите!
# ************************************************************************************************************
# Дополнение:
# - Не стал вводить дополнительные проверки - старался придерживаться только ограничений ТЗ.
# - Добавил проверку для треугольника: если сумма двух меньших сторон должна быть больше большей стороны - ошибка.
#   Если не проверять - площадь треугольника считается с ошибкой.
# - Подменил метод __str__ для вывода имени экземпляра объекта.
# Классы
class Figure:
    sides_count = 0  # Количество сторон
    INFO = "фигуры"
    def __init__(self):
        self.__sides = []  # Список сторон (целые числа).
        self.__color = []  # Cписок цветов в формате RGB
        self.filled = False  # Закрашенный, bool


    def get_color(self):  # Возвращает список RGB цветов.
        return self.__color

    def set_color(self, r, g, b):
        if self.__is_valid_color(r, g, b):  # Проверка валидности RGB.
            self.__color = [r, g, b]

    def __is_valid_color(self, r, g, b):
        return True if 0 <= r <= 255 and 0 <= g <= 255 and 0 <= b <= 255 else False  # Если RGB в пределах 0..255, то можно.

    def __is_valid_sides(self, *args):
        res = list(
            x for x in [*args] if isinstance(x, int))  # составляем промежуточный список после проверки на тип данных.
        # print (f'res={res}', [*args],)
        if self.sides_count == 3 and (sum(res) - max(res)) <= max(res):  # Проверка сторон если треугольник.
            res[0] = -1  # Вносим ошибку.
        return True if len(
            [x for x in res if x > 0]) == self.sides_count else False  # Если все стороны > 0 - пропускаем.

    def get_sides(self):  # Возвращаем значения сторон.
        return self.__sides

    def __len__(self):  # Переопределяем метод для вычисления периметра фигуры
        # if self.__is_valid_sides(*self.__sides):
        if self.sides_count == 1:  # Если фигура - круг, то 2*pi*r
            # print('p=',round(float(2*pi*self.__sides[0]),2))
            return int(2 * pi * self.__sides[0])
        else:
            return int(sum(self.__sides))  # Во всех остальных случаях периметр - сумма всех сторон.

    def __str__(self):
        return str(*[key for key, value in globals().items() if value == self]) # Ищем имя экземпляра объекта
                                                                                # через globals()

    def set_sides(self, *new_sides):  # Занесение данных по сторонам объектов.
        if isinstance(self, Cube) and len([*new_sides]) == 1:  # Если куб и передаваемое значение одно, то
            new_sides = tuple(
                [*new_sides][0] for i in range(1, 13))  # тиражируем во входной поток 12 раз данное значение.
        if self.__is_valid_sides(*new_sides):  # Если проверка по входному потоку прошла успешно,
            self.__sides = [*new_sides]  # заносим данных входного потока в список сторон объекта
        else:  # Если проверка не прошла,
            # print([1 for i in range(1,self.sides_count+1)])
            if len(self.__sides) != self.sides_count:  # Если это инициализация объекта -
                self.__sides = [1 for i in range(1, self.sides_count + 1)]  # заполняем список сторон объекта единицами.


class Circle(Figure):  # Класс круг.
    sides_count = 1  # Количество сторон.
    INFO = 'круга'
    def __init__(self, color, *args):
        super().__init__()
        # print('cls args',*args)
        self.set_color(color[0], color[1], color[2])  # Установка цвета.
        self.set_sides(*args)  # Установка сторон объекта.
        self.__radius = self.get_sides()[0]  # Установка радиуса.
        self.name = [key for key, value in globals().items() if value == self]

    def get_square(self):  # Площадь круга.
        return round(pi * self.__radius ** 2, 2)

class Triangle(Figure):  # Класс треугольник.
    sides_count = 3  # Количество сторон.
    INFO = "треугольника"
    def __init__(self, color, *args):
        super().__init__()
        self.set_color(color[0], color[1], color[2])  # Установка цвета.
        self.set_sides(*args)  # Установка сторон объекта.
        self.name = [key for key, value in globals().items() if value == self]

    def get_square(self):  # Площадь треугольника.
        pp = len(self) / 2  # Полу-периметр.
        sides = self.get_sides()  # Установка сторон объекта.
        # print('Triangle - ',sides,pp)
        return round(sqrt(pp * (pp - sides[0]) * (pp - sides[1]) * (pp - sides[2])), 2)

class Cube(Figure):  # Класс куб.
    sides_count = 12  # Количество сторон.
    INFO = "куба"
    def __init__(self, color, *args):
        super().__init__()
        self.set_color(color[0], color[1], color[2])  # Установка цвета. color:tuple[int,int,int]

        self.set_sides(*args)  # Установка сторон объекта. cube_sides = [side]*12

    def get_volume(self):  # Объем куба.
        return self.get_sides()[0] ** 3

# === Прогон ===
# Проверка заполнения единицами при неправильном вводе данных сторон объекта во время инициализации объекта.
# circle1 =Circle((200, 200, 100), 10, 15, 6)
triangle1 = Triangle((200, 200, 100), 8, 6, 3)
# cube1 = Cube((200, 200, 100), 9)
cube2 = Cube((200, 200, 100), 9, 12)
print(triangle1,triangle1.__class__.__name__,triangle1.__dict__)
print(cube2,cube2.__class__.__name__,cube2.__dict__)

# Код для проверки:
circle1 = Circle((200, 200, 100), 10)  # (Цвет, стороны)
cube1 = Cube((222, 35, 130), 6)

print(circle1,circle1.__class__.__name__,circle1.__dict__)
print(cube1,cube1.__class__.__name__,cube1.__dict__)
#print([key for key,value in globals().items() if isinstance(value,Triangle|Circle|Cube)])
print('=== Прогон ===')
# Проверка на изменение цветов:
circle1.set_color(55, 66, 77)  # Изменится
print(circle1.get_color())
cube1.set_color(300, 70, 15)  # Не изменится
print(cube1.get_color())
# Проверка на изменение сторон:
cube1.set_sides(5, 3, 12, 4, 5)  # Не изменится
print(cube1.get_sides())
circle1.set_sides(15)  # Изменится
print(circle1.get_sides())
# Проверка периметра (треугольника), это и есть длина:
print(f'Периметр {triangle1.INFO} {triangle1} -  {len(triangle1)}')
# Проверка площади (треугольника), это и есть длина:
print(f'Площадь {triangle1.INFO} {triangle1} - {triangle1.get_square()}')
# Проверка периметра (круга), это и есть длина:
print(f'Периметр {circle1.INFO} {circle1} - {len(circle1)}')
# Проверка площади (круга):
print(f'Площадь {circle1.INFO} {circle1} - {circle1.get_square()}')
# Проверка объёма (куба):
print(f'Объем {cube1.INFO} {cube1} - {cube1.get_volume()}')

print('\n=== Конец обработки === ')
