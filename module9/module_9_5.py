from turtledemo.penrose import start

print("=== Итераторы. ====\n")


# Задача "Range - это просто.":
# Создайте пользовательский класс исключения StepValueError, который наследуется от ValueError.
# Наследования достаточно, класс оставьте пустым при помощи оператора pass.
#
# Создайте класс Iterator, который обладает следующими свойствами:
# Атрибуты объекта:
# 1.start - целое число, с которого начинается итерация.
# 2.stop - целое число, на котором заканчивается итерация.
# 3.step - шаг, с которым совершается итерация.
# 4.pointer - указывает на текущее число в итерации (изначально start)
# Методы:
# 1.__init__(self, start, stop, step=1) - принимающий значения старта и конца итерации, а также шага.
# В этом методе в первую очередь проверяется step на равенство 0. Если равно, то выбрасывается исключение
# StepValueError('шаг не может быть равен 0')
# 2.__iter__ - метод, сбрасывающий значение pointer на start и возвращающий сам объект итератора.
# 3.__next__ - метод, увеличивающий атрибут pointer на step. В зависимости от знака атрибута step итерация
# завершится либо когда pointer станет больше stop, либо меньше stop. Учтите это при описании метода.
#
# Пункты задачи:
# 1.Создайте класс исключения StepValueError.
# 2.Создайте класс Iterator и опишите его атрибуты и методы.
# 3.Создайте несколько объектов класса Iterator и совершите итерации с ними при помощи цикла for.
# ********************************************************************************************************
# === Записки на манжетах ==============
# 1) Итератор — это объект, который соответствует протоколу итерации.
# 2) Итератором может быть объект, созданный с использованием:
# - Специального класса, который явно реализует методы iter() и next().
# - Готовых встроенных итераторов (например, тех, что возвращаются функциями вроде iter(), open(),
# или конструкциями вроде генераторов).
# Если вы считаете, что определение "итератор - это объект" звучит недостаточно точно, можно расширить его
# до чего-то вроде: "Итератор — это объект, который реализует методы iter() и next(),
# обычно созданный как экземпляр специально сформированного класса или полученный от встроенных средств Python."
# === Классы ===
class StepValueError(ValueError): # Создаем пользовательский класс исключения StepValueError,
                                    # который наследуется от ValueError.
    pass


class Iterator:
    def __init__(self, start, stop, step=1):
        if step == 0:  # Проверяется step на равенство 0. Если равно, то выбрасывается исключение.
            raise StepValueError('шаг не может быть равен 0')
        self.start = start # Целое число, с которого начинается итерация.
        self.stop = stop # Целое число, на котором заканчивается итерация.
        self.step = step # Шаг, с которым совершается итерация.
        # pointer - указывает на текущее число в итерации (изначально start)
        self.pointer = self.flag = 0  # Вводим flag, так как по условию ТЗ начальная позиция итератора прописывается в __iter__
        # self.info()
        self.isStopIteration = self.__isStopIteration(self.step)  # Создаем замыкатель на ветвление по step.
                                                                    # Оптимизируем работу по скорости.

    def info(self):  # Инфо метод.
        print(f'Создан объект класса Iterator (start={self.start},stop={self.stop},step={self.step}) ')

    def __iter__(self):  # Метод, сбрасывающий значение pointer на start и возвращающий сам объект итератора.
        self.pointer = self.start  # Сбрасываем значение pointer на start (условие ТЗ).
        return self

    # В зависимости от знака атрибута step итерация завершится либо когда pointer станет больше stop,
    # либо меньше stop. Учтите это при описании метода.
    def __isStopIteration(self, step):  # Процедура описывающая создание замыкателя по step
        if step < 0:
            def choice(next_pointer, stop):
                if next_pointer < stop:
                    return True
                else:
                    return False
        else:
            def choice(next_pointer, stop):
                if next_pointer > stop:
                    return True
                else:
                    return False

        return choice

    def __next__(self):  # Метод, увеличивающий атрибут pointer на step.
        # В зависимости от знака атрибута step итерация завершится либо когда pointer станет больше stop,
        # либо меньше stop. Учтите это при описании метода.
        if self.isStopIteration(self.pointer + self.step, self.stop):  # Если step>0
            raise StopIteration()  # Если замыкатель говорит, что пора закругляться - закругляемся.

        self.pointer += self.step * self.flag  # Первый раз - не считается (в первом шаге - не итерируем -
        # так как значение присвоено в __iter__ (условие ТЗ).
        self.flag = 1  # Сбрасываем запрет итерации.
        return self.pointer


# === Прогон ===
try:
    iter1 = Iterator(100, 200, 0)
    for i in iter1:
        print(i, end=' ')
except StepValueError:
    print('Шаг указан неверно')

iter2 = Iterator(-5, 1)
iter3 = Iterator(6, 15, 2)
iter4 = Iterator(5, 1, -1)
iter5 = Iterator(10, 1)

for i in iter2:
    print(i, end=' ')
print()
for i in iter3:
    print(i, end=' ')
print()
for i in iter4:
    print(i, end=' ')
print()
for i in iter5:
    print(i, end=' ')
print()

print('\n=== Конец обработки === ')
