from random import choice

print("=== Создание функций на лету. ====\n")

# Задача "Функциональное разнообразие.":
# Lambda-функция:
# Даны 2 строки:
# first = 'Мама мыла раму'
# second = 'Рамена мало было'
# Необходимо составить lambda-функцию для следующего выражения - list(map(?, first, second)).
# Здесь ? - место написания lambda-функции.
#
# Результатом должен быть список совпадения букв в той же позиции:
# [False, True, True, False, False, False, False, False, True, False, False, False, False, False]
# Где True - совпало, False - не совпало.
#
# Замыкание:
# Напишите функцию get_advanced_writer(file_name), принимающую название файла для записи.
# Внутри этой функции, напишите ещё одну - write_everything(*data_set), где *data_set - параметр принимающий
# неограниченное количество данных любого типа.
# Логика write_everything заключается в добавлении в файл file_name всех данных из data_set в том же виде.
# Функция get_advanced_writer возвращает функцию write_everything.
#
# Данный код:
# write = get_advanced_writer('example.txt')
# write('Это строчка', ['А', 'это', 'уже', 'число', 5, 'в', 'списке'])
# Запишет данные в файл в таком виде:
#
# Метод __call__:
# Создайте класс MysticBall, объекты которого обладают атрибутом words хранящий коллекцию строк.
# В этом классе также определите метод __call__ который будет случайным образом выбирать слово из words
# и возвращать его. Для случайного выбора с одинаковой вероятностью для каждого данного в коллекции можете
# использовать функцию choice из модуля random.
#
# Ваш код (количество слов для случайного выбора может быть другое):
# from random import choice
# # Ваш класс здесь
# first_ball = MysticBall('Да', 'Нет', 'Наверное')
# print(first_ball())
# print(first_ball())
# print(first_ball())
# Примерный результат (может отличаться из-за случайности выбора):
# Да
# Да
# Наверное
#
# Примечания:
# 1.Все задания пишутся в одном модуле.
# 2.Передаваемые данные в функции и объекты можете использовать свои, главное, чтобы ваш код полноценно
# демонстрировал логику написанного.
# ********************************************************************************************************
# Часть 1
first = 'Мама мыла раму'
second = 'Рамена мало было'
# Необходимо составить lambda-функцию для следующего выражения - list(map(?, first, second)).
compare = lambda x, y: x == y  # функция сравнивающая пары слов из first и second посимвольно.
print(list(map(compare, first, second)))  # Основной мотор сравнения.


# Часть 2
# === Функции ===
def get_advanced_writer(file_name):  # Замыкателем является имя файла.
    def write_everything(*data_set):
        with open(file_name, 'w+', encoding='utf-8') as file:
            for i, elem in enumerate(data_set):
                if isinstance(elem, list):
                    file.write(f'\n{" ".join(map(str, elem))}')  # Так как в ТЗ не было примера, то предположил,
                    # что, если встречается список, то собираем его в строку и запускаем в файл отдельной строчкой.
                    # Такая конструкция обусловлена тем, что join не собирает не строковые элементы.
                else:
                    file.write(
                        f'{"\n" if i != 0 else ""}{elem}')  # Не ставим ВК только перед первым элементом (если он не список)

    return write_everything


# === Прогон ===
write = get_advanced_writer('../example.txt')  # Собираем замыкатель.
write('Это строчка', ['А', 'это', 'уже', 'число', 5, 'в', 'списке'], 'Это еще одна строчка')


# Часть 3
# === Классы ===
class MysticBall:  # Класс MysticBall, объекты которого обладают атрибутом words хранящий коллекцию строк.
    def __init__(self, *args):
        self.words = list(args)
        # self.info()

    def info(self):  # Чтобы посмотреть, что передалось.
        print(self.words)

    def __call__(self, *args, **kwargs):  # Метод __call__ который будет случайным образом выбирать слово из words.
        return choice(self.words)  # Возвращаем случайный выбор.


# === Прогон ===
first_ball = MysticBall('Да', 'Нет', 'Наверное')
print(first_ball())
print(first_ball())
print(first_ball())
print('\n=== Конец обработки === ')
