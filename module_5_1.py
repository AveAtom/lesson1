print("=== Атрибуты и методы объекта. ====\n")


# Задача "Developer - не только разработчик":
# Реализуйте класс House, объекты которого будут создаваться следующим образом:
# House('ЖК Эльбрус', 30)
# Объект этого класса должен обладать следующими атрибутами:
# self.name - имя, self.number_of_floors - кол-во этажей
# Также должен обладать методом go_to(new_floor), где new_floor - номер этажа(int), на который нужно приехать.
# Метод go_to выводит на экран(в консоль) значения от 1 до new_floor(включительно).
# Если же new_floor больше чем self.number_of_floors или меньше 1, то вывести строку "Такого этажа не существует".
# Пункты задачи:
# 1.Создайте класс House.
# 2.Внутри класса House определите метод __init__, в который передадите название и кол-во этажей.
# 3.Внутри метода __init__ создайте атрибуты объекта self.name и self.number_of_floors, присвойте им переданные значения.
# 4.Создайте метод go_to с параметром new_floor и напишите логику внутри него на основе описания задачи.
# 5.Создайте объект класса House с произвольным названием и количеством этажей.
# 6.Вызовите метод go_to у этого объекта с произвольным числом.
# Примечания:
# 1.self - это переменная указывающая на объект. Используйте её для обращения к атрибутам или методам объекта.
# 2.Обращение к атрибутам или методам объекта/класса происходит при помощи "."
# 3.Метод __init__ вызывается в момент создания объекта.
# **********************************************************************************************************
# Дополнение
# 1. Создаем функцию say_floor() - спряжение слова этаж для функции say_info()
# 2. Добавляем значения по умолчанию. Не любим красненькое.
# 3. Проверка на ноль этажей.

# === Классы ===
class House:
    def __init__(self, name='Пустырь', number_of_floor=0):
        self.name = name  # создаем атрибут объекта наименование объекта
        self.number_of_floor = number_of_floor  # создаем атрибут число этажей
        self.floor = (
            'этажей', 'этаж', *('этажа' for x in range(3)), *('этажей' for x in range(5)))  # спряжение слова этаж
        self.say_info()  # Инфо строка активации класса

    def say_floor(self):  # Обработка спряжения слова этаж в зависимости от количества этажей
        if self.number_of_floor != 0:  # Если этажей не ноль
            if 10 <= self.number_of_floor % 100 < 20:  # Если число в диапазоне от 10 до 19
                return f'{self.number_of_floor} этажей'
            else:  # Во всех других случаях - floor[последняя цифра]
                return f'{self.number_of_floor} {self.floor[self.number_of_floor % 10]}'
        else:
            return '0 этажей и он еще в стадии строительства'  # Если 0

    def say_info(self):  # Создает инфо строку активации класса.
        print(f'Добро пожаловать в {self.name}. Высота нашего комплекса {self.say_floor()}.')

    def go_to(self, new_floor=0):  # Эмулирует подъем на лифте
        if self.number_of_floor >= new_floor and int(new_floor) > 0:  # Если разрешенное значение.
            for i in range(1, new_floor + 1):  # Эмуляция подъема.
                print(i)
        else:  # Если не разрешенное значение.
            print('Такого этажа не существует.')


# === Прогон ===
h1 = House('ЖК Горский', 22)
h2 = House('Домик в деревне', 2)
h1.go_to(5)
h2.go_to(10)

print('\n=== Конец обработки === ')
