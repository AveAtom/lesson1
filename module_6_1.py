print("=== Зачем нужно наследование. ====\n")


# Задача "Съедобное, несъедобное.":
# Разнообразие животного мира давно будоражит умы человечества. Царства, классы, виды... Почему бы и нам не попробовать
# выстроить что-то подобное используя наследования классов?
# Необходимо описать пример иерархии животного мира, используя классы и принцип наследования.
# Создайте:
# 2 класса родителя: Animal, Plant
# Для класса Animal атрибуты alive = True(живой) и fed = False(накормленный), name - индивидуальное название каждого
# животного.
# Для класса Plant атрибут edible = False(съедобность), name - индивидуальное название каждого растения
# 4 класса наследника:
# Mammal, Predator для Animal.
# Flower, Fruit для Plant.
# У каждого из объектов класса Mammal и Predator должны быть атрибуты и методы:
# eat(self, food) - метод, где food - это параметр, принимающий объекты классов растений.
# В данном случае можно использовать принцип наследования, чтобы не дублировать код.
# Метод eat должен работать следующим образом:
# Если переданное растение (food) съедобное - выводит на экран "<self.name> съел <food.name>",
# меняется атрибут fed на True.
# Если переданное растение (food) не съедобное - выводит на экран "<self.name> не стал есть <food.name>",
# меняется атрибут alive на False.
# Т.е если животному дать съедобное растение, то животное насытится, если не съедобное - погибнет.
# У каждого объекта Fruit должен быть атрибут edible = True (переопределить при наследовании)
# Создайте объекты классов и проделайте действия затронутые в примере результата работы программы.
# Пункты задачи:
# 1.Создайте классы Animal и Plant с соответствующими атрибутами и методами
# 2.Создайте(+унаследуйте) классы Mammal, Predator, Flower, Fruit с соответствующими атрибутами и методами.
# При необходимости переопределите значения атрибутов.
# 3.Создайте объекты этих классов.
# Примечания:
# 1.Помните, обращаясь к атрибутам объекта текущего класса используйте параметр self.
# 2.Передавая объекты классов Fruit и Flower в метод eat, так же можно обращаться к их атрибутам внутри.
# 3.Обращайте внимание на то, где атрибут класса, а где атрибут объекта.
# *************************************************************************************************
# Дополнение:
# - Вывод смысловой событийной связи для покушавших животных.
# - Вывод списка экземплярных атрибутов для животных и растений.
# === Классы ===
class ValidationError(Exception):  # Для перехвата ошибок переопределяем класс ValidationError
    pass


class Animal:
    alive = True  # Живой
    fed = False  # Накормленный

    def __init__(self, name=""):
        self.name = name  # Индивидуальное название каждого животного.

    def eat(self, food):
        if isinstance(food, Plant):
            if food.edible:
                print(f'{self.name} съел {food.name}')
                self.fed = True
            else:
                print(f'{self.name} не стал есть {food.name}')
                self.alive = False
        else:
            raise ValidationError('В метод eat() должны передаваться объекты класса Plant.')


class Plant:
    edible = False  # Съедобность.

    def __init__(self, name=""):
        self.name = name  # Индивидуальное название каждого растения.


class Mammal(Animal):
    pass


class Predator(Animal):
    pass


class Flower(Plant):
    pass


class Fruit(Plant):
    edible = True


# === Прогон ===
list_alive = ['сдох', 'выжил']  # Словарь alive.
list_fed = ['голодный', 'сытый']  # Словарь fed.
try:
    a1 = Predator('Волк с Уолл-Стрит')
    a2 = Mammal('Хатико')
    p1 = Flower('Цветик семицветик')
    p2 = Fruit('Заводной апельсин')
    print(a1.name)
    print(p1.name)
    print(a1.alive)
    print(a2.fed)
    a1.eat(p1)
    a2.eat(p2)
    print(a1.alive)
    print(a2.fed)
except ValidationError as e:  # Если ошибка - выводим ошибку - останавливаем программу.
    print(e)
    print('\n=== Конец обработки (ошибка)  === ')
    exit()
# Вывод смысловой событийной связи.
print(f'\n{a1.name} - {list_fed[a1.fed]} - {list_alive[a1.alive]}.')
print(f'{a2.name} - {list_fed[a2.fed]} - {list_alive[a2.alive]}.\n')
# Вывод списков экземплярных атрибутов для объектов a1,a2,p1,p2
print(f'Атрибуты a1 - {a1.__dict__}.')
print(f'Атрибуты a2 - {a2.__dict__}.')
print(f'Атрибуты p1 - {p1.__dict__}.')
print(f'Атрибуты p2 - {p2.__dict__}.')

# Что произошло: Хищник попытался съесть цветок и погиб, млекопитающее съело фрукт и насытилось.

print('\n=== Конец обработки === ')
