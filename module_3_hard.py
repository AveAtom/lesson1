print("=== Подробнее о функциях. ====\n")


# Задание "Раз, два, три, четыре, пять .... Это не всё?":
# Наши студенты, без исключения, - очень умные ребята. Настолько умные, что иногда по утру сами путаются в том,
# что намудрили вчера вечером.
# Один из таких учеников уснул на клавиатуре в процессе упорной учёбы (ещё и трудолюбивые). Тем не менее,
# даже после сна, его код остался рабочим и выглядел следующим образом:
#
# data_structure = [
#   [1, 2, 3],
#   {'a': 4, 'b': 5},
#   (6, {'cube': 7, 'drum': 8}),
#   "Hello",
#   ((), [{(2, 'Urban', ('Urban2', 35))}])
# ]
#
# Увидев это студент задался вопросом: "А есть ли универсальное решение для подсчёта суммы всех чисел и длин всех строк?"
# Да, выглядит страшно, да и обращаться нужно к каждой внутренней структуре (списку, словарю и т.д.) по-разному.
# Ученику пришлось каждый раз использовать индексацию и обращение по ключам - универсального решения для таких
# структур он не нашёл.
# Помогите сокурснику осуществить его задумку.
# Что должно быть подсчитано:
# Все числа (не важно, являются они ключами или значениям или ещё чем-то).
# Все строки (не важно, являются они ключами или значениям или ещё чем-то)
#
# Для примера, указанного выше, расчёт вёлся следующим образом:
# 1 + 2 + 3 + len('a') + 4 + len('b') + 5 + 6 + len('cube') + 7 + .... + 35 = 99
#
# Примечания (рекомендации):
# 1.Весь подсчёт должен выполняться одним вызовом функции.
# 2.Рекомендуется применить рекурсивный вызов функции, для каждой внутренней структуры.
# 3.Т.к. каждая структура может содержать в себе ещё несколько элементов, можно использовать параметр *args
# 4.Для определения типа данного используйте функцию isinstance.
# **********************************************************************************************************
# Ограничения:
# - в коллекции словаря у нас нет изменяемых коллекций (только значения)
# - в исходной коллекции у нас используются только типы: int,str,tuples,list,dict,sets
# - в коллекции dict keys - это всегда строки, а values - это числа
# === Функции ===
def calculate_structure_sum(*args):
    res = 0  # счетчик вычислений
    for x in list(*args):  # аргументы функции приводим к коллекции list.
        if isinstance(x, int):  # если элемент это число, то складываем его к res.
            res += x
        elif isinstance(x, str):  # если элемент это строка, то к res прибавляем ее длину.
            res += len(x)
        elif isinstance(x,
                        dict):  # если элемент это dict, то к res прибавляем сумму длин всех ключей и сумму всех значений.
            res += sum([len(keys) + int(values) for keys, values in dict(x).items()])
        else:  # остальное считаем коллекциями и используем рекурсию.
            res += calculate_structure_sum(x)  #
    return res  # Отдаем значение res.


# === Прогон ====

data_structure = [
    [1, 2, 3],
    {'a': 4, 'b': 5},
    (6, {'cube': 7, 'drum': 8}),
    "Hello",
    ((), [{(2, 'Urban', ('Urban2', 35))}])
]

result = calculate_structure_sum(data_structure)
print(result)

print('=== Конец обработки === ')
