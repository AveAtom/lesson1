# Задача "Многопроцессное считывание.":
# Необходимо считать информацию из нескольких файлов одновременно, используя многопроцессный подход.
# Подготовка:
# Скачайте архив с файлами для считывания данных и распакуйте его в проект для дальнейшего использования.
# Выполнение:
# Создайте функцию read_info(name), где name - название файла. Функция должна:
# 1.Создавать локальный список all_data.
# 2.Открывать файл name для чтения.
# 3.Считывать информацию построчно (readline), пока считанная строка не окажется пустой.
# 4.Во время считывания добавлять каждую строку в список all_data.
# Этих операций достаточно, чтобы рассмотреть преимущество многопроцессного выполнения программы над линейным.
# 1.Создайте список названий файлов в соответствии с названиями файлов архива.
# 2.Вызовите функцию read_info для каждого файла по очереди (линейно) и измерьте время выполнения и выведите его в консоль.
# 3.Вызовите функцию read_info для каждого файла, используя многопроцессный подход: контекстный менеджер with и объект
# Pool. Для вызова функции используйте метод map, передав в него функцию read_info и список названий файлов.
# Измерьте время выполнения и выведите его в консоль.
# Для избежания некорректного вывода запускайте линейный вызов и многопроцессный по отдельности, предварительно
# закомментировав другой.
# Примечания:
# 1.Используйте конструкцию if __name__ == '__main__' при многопроссном подходе.
# 2.Выводить или возвращать список all_data в функции не нужно. Можете сделать это, но кол-во информации в файлах
# достигает - 10^9 строк.
# 3.Дополнительно о классе Pool можете прочитать здесь.
# ******************************************************
from multiprocessing import Pool
from datetime import datetime
# === Функции ===
# Создайте функцию read_info(name), где name - название файла. Функция должна:
# 1.Создавать локальный список all_data.
# 2.Открывать файл name для чтения.
# 3.Считывать информацию построчно (readline), пока считанная строка не окажется пустой.
# 4.Во время считывания добавлять каждую строку в список all_data.
def read_info(name):
    all_data=[]
    with open(name,'r',encoding='utf-8') as file:
        while line:=file.readline():
            all_data.append(line)

# === Прогон ===
filenames = [f'./module11/file {number}.txt' for number in range(1, 5)]
# Линейный вызов
# print("=== Многопроцессное программирование. ====\n")
# start=datetime.now()
# for f in filenames:
#     read_info(f)
# end=datetime.now()
# print(end-start,'(линейный)')
# print('\n=== Конец обработки. === ')
# 0:00:13.067752 (линейный)
# exit()
# Многопроцессный
start=datetime.now()
if __name__ == '__main__':
    with Pool(5) as p:
        _=p.map(read_info, filenames)
end=datetime.now()
if (end-start).microseconds!=0:
    print("=== Многопроцессное программирование. ====\n")
    print('0:00:13.067752 (линейный)')
    print(end-start,'(многопроцессный)')
    print('\n=== Конец обработки. === ')

