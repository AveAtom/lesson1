import os
# Игра : "Крестики - Нолики"
# Разработка : АТом

def draw(area=[]):  # функция прорисовки крестиков / ноликов
    for i in area:
        print(*i)


print('=== Крестики и нолики ===')

area = [['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*']]  # Основная доска
sum_rows = [[0, 0, 0], [0, 0, 0]]  # Сумма по строкам
sum_cols = [[0, 0, 0], [0, 0, 0]]  # Сумма по колонкам
sum_dgs = [[0, 0], [0, 0]]  # Сумма по диагоналям
is_correct = [1, 2, 3]  # Доступные значения для ввода
is_dgs1 = [11, 22, 33]  # Значения строкастолбец, которые подпадают под диагональ 1
is_dgs2 = [13, 22, 31]  # Значения строкастолбец, которые подпадают под диагональ 2
char = ['X', 'O']  # Символы для доски
str_char = ['крестики', 'нолики']  # текстовые расшифровки символов для доски
b_id = 1  # Семафор 1 (нолики)
a_id = 0  # Семафор 2 (крестики)
clear = lambda: os.system('cls')  # Функция стирания экрана (не работает)
status_str = ""  # Строка статуса для сообщений обработки
i_turn = 0  # Счетчик ходов
# Механика переключения основана на a,b=b,a

while True:
    clear()  # Не работает.
    print(status_str)  # Вывод строки статуса
    draw(area)  # Рисование доски
    a_id, b_id = b_id, a_id  # Механика переключения
    status_str = ""  # Мавр сделал дело - мавр может уходить
    print(f'Ходят - {str_char[a_id]}')

    # Баловство пользователей не рассматривал. Поэтому предполагаем, что вводить будут цифры.
    # Заполнение фактической базы для проверки победы происходит в момент хода.
    # Поэтому избегаем лишних циклов для проверки.
    coord = int(input('Введите координаты (строкастолбец) 12 = 1 строка, 2 столбец : '))  # вводим двузначное число,
    # которое состоит из номера строки и номера столбца.
    x = coord // 10  # Узнаем номер строки
    y = coord - x * 10  # Узнаем номер столбца
    # print(f'x - {x}, y - {y}')
    if (x not in is_correct) or (y not in is_correct):  # Если x либо y не 1..3, то пропуск хода.
        status_str = "Неправильные координаты - пропуск хода"
        continue
    if area[x - 1][y - 1] != '*':  # Если место на доске занято - пропуск хода
        status_str = "Ячейка уже занята - пропуск хода"
        continue
    area[x - 1][y - 1] = char[a_id]  # Заносим символ на доску
    i_turn += 1  # Увеличиваем счетчик хода
    # Блок проверки на победителя
    sum_rows[a_id][x - 1] += 1  # увеличиваем счетчик строк
    sum_cols[a_id][y - 1] += 1  # Увеличиваем счетчик столбцов

    if coord in is_dgs1:
        sum_dgs[a_id][0] += 1  # увеличиваем счетчик диагонали 1
    if coord in is_dgs2:
        sum_dgs[a_id][1] += 1  # увеличиваем счетчик диагонали 1
    # print(f'rows - {a_rows}, cols - {a_cols}, diags - {a_dgs}')
    if max(max(*sum_rows[a_id]), max(*sum_cols[a_id]),
           max(*sum_dgs[a_id])) == 3:  # Если в счетчиках присутствует 3 - мы выиграли.
        print(f'Команда {str_char[a_id]} - ПОБЕДИТЕЛЬ!')
        # print(f'rows - {sum_rows}, cols - {sum_cols}, diags - {sum_dgs}')
        draw(area)
        break
    if i_turn == 9:  # Если количество ходов 9 - ничья.
        print('Ходы кончились - НИЧЬЯ!')
        draw(area)
        break

print('Конец игры.')
